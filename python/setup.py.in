import os, sys

from setuptools import setup
from distutils.extension import Extension
from setuptools.command.build_ext import build_ext
from setuptools.command.install_lib import install_lib
from setuptools.command.install_egg_info import install_egg_info
from distutils import log


# Performs a build which verbosity is driven by VERBOSE
class QuietBuild(build_ext):
    def run(self):
        if "VERBOSE" not in os.environ:
            log.info("building '{}' extension".format(self.extensions[0].name))

            self.oldstdout = os.dup(sys.stdout.fileno())
            self.devnull = open('devnull.txt', 'w')
            os.dup2(self.devnull.fileno(), sys.stdout.fileno())

        build_ext.run(self)

        if "VERBOSE" not in os.environ:
            os.dup2(self.oldstdout, sys.stdout.fileno())
            self.devnull.close()

# The standard install_lib class installs every single file it finds in the
# build directory. Here, we just want to install the JSBSim module so that it
# can be accessed everywhere on the platform. This class is therefore
# specializing the standard install_lib to do just that.
class InstallJSBSimModule(install_lib):
    def __init__(self, dist):
        install_lib.__init__(self, dist)
        # Get the name of the JSBSim Python module (on some platforms this name
        # can be quite complicated).
        build_ext = self.get_finalized_command('build_ext')
        self.module_name = build_ext.get_ext_filename(build_ext.extensions[0].name)

    def install(self):
        if not os.path.exists(self.install_dir):
            os.makedirs(self.install_dir)
        self.copy_file(os.path.join('tests', self.module_name),
                       os.path.join(self.install_dir, self.module_name))

# Dummy class to skip the installation process of the library
class SkipInstallLib(InstallJSBSimModule):
    def run(self):
        log.info("Skipped installation of %s", self.module_name)

# Dummy class to skip the installation process of the egg infos
class SkipInstallEgg(install_egg_info):
    def run(self):
        log.info("Skipped installation of %s", os.path.split(self.target)[-1])

# Process the path to the JSBSim library.
library_path = os.path.join('${CMAKE_BINARY_DIR}','src')

# Parse the --config option that we set for msbuild (it can contain Release,
# Debug, RelWithDebInfo, etc.) then update the JSBSim library path accordingly.
for idx, opt in enumerate(sys.argv):
    if opt == '--config':
        if len(sys.argv) <= idx+1:
            raise ValueError("--config needs an attribute.")

        library_path=os.path.join(library_path, sys.argv[idx+1])

        # Remove the --config option and its argument from sys.argv otherwise
        # setuptools will complain about an unknown '--config' option.
        del sys.argv[idx] # remove --config
        del sys.argv[idx] # remove the --config argument
        break

# Build & installation process for the JSBSim Python module
setup(
    name="${PROJECT_NAME}",
    version="${PROJECT_VERSION}",
    cmdclass={'build_ext': QuietBuild, 'install_lib': InstallJSBSimModule},
    ext_modules=[Extension('jsbsim', ['${JSBSIM_CXX}'],
                           libraries=['JSBSim'],
                           include_dirs=[os.path.join('${CMAKE_SOURCE_DIR}',
                                                      'src'),
                                         os.path.join('${CMAKE_SOURCE_DIR}',
                                                      'python')],
                           library_dirs=[library_path],
                           extra_compile_args=[${CXX_FLAGS}],
                           language='c++')])

# The fpectl module is not processed if we are building a wheel package since we
# do not want to include fpectl in the distribution. This module is only used
# to test the library.
if sys.argv[1] != 'bdist_wheel':
    # Build process for the fpectl module (but don't install !!!)
    setup(
        cmdclass={'build_ext': QuietBuild, 'install_lib': SkipInstallLib,
                  'install_egg_info': SkipInstallEgg},
        ext_modules=[Extension('fpectl',
                               sources=[os.path.join('${CMAKE_SOURCE_DIR}',
                                                     'python',
                                                     'fpectlmodule.cpp')],
                               language='c++')])
